name: CI
on:
  pull_request:
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**.go'
      - '.github/workflows/**.yml'
  push:
    branches: [main, master]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**.go'
      - '.github/workflows/**.yml'

env:
  GO_VERSION: '1.23'

jobs:
  # 代码质量检查作业
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"

  # 单元测试作业
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23'] # 支持最近3个版本

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Run tests with race detector (Linux/macOS only)
        if: matrix.os != 'windows-latest'
        run: |
          go test -race -short ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # 构建测试作业
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: go build -v ./...

  # 所有检查完成后的汇总作业
  all-checks:
    name: All Checks Passed
    needs: [lint, test, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs
        shell: bash
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || 
             [ "${{ needs.test.result }}" != "success" ] || 
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed!"